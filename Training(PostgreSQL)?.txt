// Creating 1 table
CREATE TABLE IF NOT EXISTS clients (
id serial
	CONSTRAINT clients_pk
	PRIMARY KEY UNIQUE NOT NULL,   UNIQUE NOT NULL = NO NEED TO CREATE , IT'S ALL IN PRIMARY KEY
	name varchar(20),
	email varchar(255) UNIQUE NOT NULL,
	phone int UNIQUE NOT NULL,
	about varchar
);

// Creating 2 table
CREATE TABLE IF NOT EXISTS statuses(
id serial
	CONSTRAINT statuses_pk
	PRIMARY KEY ,
	alias varchar(15) UNIQUE NOT NULL,
	description varchar	NOT NULL

);
// Creating 3 table
CREATE TABLE IF NOT EXISTS client_status(
clients_id int NOT NULL,
status_id int NOT NULL

);

// Creating 4 table
CREATE TABLE IF NOT EXISTS accounts(
id serial
	CONSTRAINT accounts_pk
	PRIMARY KEY ,

	client_id int NOT NULL,
	number varchar(20) UNIQUE NOT NULL,
	value real NOT NULL

);

// Inserting into tables
INSERT INTO clients (name, email, phone, about) VALUES ('Ihor', 'qwerty@mail.ua','+380945212', 'nice guy');
INSERT INTO clients (name, email, phone, about) VALUES ('Aleksey', 'alex@mail.ua','+380941156', 'bad guy');
INSERT INTO clients (name, email, phone, about) VALUES ('Maria', 'masha@mail.ua','+380941226', 'no info');
INSERT INTO clients (name, email, phone, about) VALUES ('Dmitriy', 'dimas@mail.ua','+380959651', 'just dima');
INSERT INTO clients (name, email, phone, about) VALUES ('Sergey', 'sergey@mail.ua','+380952135', 'sereha');
INSERT INTO clients (name, email, phone, about) VALUES ('Anatoliy', 'anatoliy@mail.ua','+380951113', 'anatoliy');
INSERT INTO clients (name, email, phone, about) VALUES ('Larisa', 'larisa@mail.ua','+380952229', 'larisa');
INSERT INTO clients (name, email, phone, about) VALUES ('Marina', 'marina@mail.ua','+380199922', 'marina');
INSERT INTO clients (name, email, phone, about) VALUES ('Carolina', 'carolina@mail.ua','+380673358', 'carolina');
INSERT INTO clients (name, email, phone, about) VALUES ('Stepan', 'stepan@mail.ua','+380993355', 'stepan');

// Inserting one more
INSERT INTO statuses (alias,description) VALUES ('Standard', 'Standard status');
INSERT INTO statuses (alias,description) VALUES ('Premium', 'Premium status');
INSERT INTO statuses (alias,description) VALUES ('VIP', 'VIP status');

// Inserting one more
INSERT INTO client_status (clients_id, status_id) VALUES (1,3);
INSERT INTO client_status (clients_id, status_id) VALUES (2,2);
INSERT INTO client_status (clients_id, status_id) VALUES (3,4);
INSERT INTO client_status (clients_id, status_id) VALUES (4,2);
INSERT INTO client_status (clients_id, status_id) VALUES (5,2);
INSERT INTO client_status (clients_id, status_id) VALUES (6,2);
INSERT INTO client_status (clients_id, status_id) VALUES (7,2);
INSERT INTO client_status (clients_id, status_id) VALUES (8,2);
INSERT INTO client_status (clients_id, status_id) VALUES (9,2);
INSERT INTO client_status (clients_id, status_id) VALUES (10,3);

// Last inserting
INSERT INTO accounts (client_id, number, value) VALUES (1,'238482', 1000.101);
INSERT INTO accounts (client_id, number, value) VALUES (2,'3214423', 5000.101);
INSERT INTO accounts (client_id, number, value) VALUES (3,'123523', 200.02);
INSERT INTO accounts (client_id, number, value) VALUES (4,'1616222', 1003.1);
INSERT INTO accounts (client_id, number, value) VALUES (5,'111555', 11155.1);
INSERT INTO accounts (client_id, number, value) VALUES (6,'002121', 12.7);
INSERT INTO accounts (client_id, number, value) VALUES (7,'002121421', 10000);
INSERT INTO accounts (client_id, number, value) VALUES (8,'228228228', 228.228);
INSERT INTO accounts (client_id, number, value) VALUES (9,'11119997', 1997.7);
INSERT INTO accounts (client_id, number, value) VALUES (10,'1112336', 505.5);

// REQUESTS :
1.Напишите запрос, чтобы достать все значения из таблицы clients, где телефон = 380958089090;
--> select phone from clients where phone = 380958089090;

2.Напишите запрос, чтобы достать все alias и description из таблицы statuses;
--> select alias,description from statuses;

3.Напишите запрос, чтобы достать все number из таблицы accounts, где сумма более 1000.0;
--> select value from accounts where value > 1000.0;

4.Напишите запрос, чтобы достать все значения из таблицы clients,
где длина имени более 7 значений(использовать функцию postgreSQL);
--> select name from clients where length(name) > 7;

5.Напишите запрос, чтобы достать значения name, phone, about из таблицы clients,
 где name не пустое значение, phone больше, чем 380951111111 и где about не пустое значение;
--> select name, phone, about from clients where name IS NOT NULL AND phone > 380951111111 AND about IS NOT NULL;

6.Напишите запрос, чтобы достать всех клиентов, у кого email начинается с ‘alex’;
--> select email from clients where email LIKE 'alex%';

7.Напишите запрос, чтобы достать всех клиентов, в порядке убывания по номеру телефона;
--> select * from clients order by phone;
--> select phone from clients order by phone;

8.Напишите запрос, чтобы достать все значения из 2х таблиц(clients & accounts),
 при условии полного совпадения clients.id = accounts.client_id;
 --> select * from clients , accounts where clients.id = accounts.client_id;

9.Напишите запрос, чтобы достать значения clients.name, clients.email, clients.phone, statuses.alias
 используя связующую таблицу для этого(join 3х таблица).
 --> select c.name, c.email, c.phone, st.alias
     from clients as c INNER JOIN statuses as st ON c.id = st.id
     INNER JOIN client_status as cs ON c.id = cs.clients_id
     and st.id = cs.status_id; --> ?????????????????????????
                                   ?????????????????????????

























